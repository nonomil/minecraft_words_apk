#!/usr/bin/env node

/**
 * ÁâàÊú¨ÁÆ°ÁêÜÂô® - Ëá™Âä®ÈÄíÂ¢ûAPKÁâàÊú¨Âè∑
 * Version Manager - Auto-increment APK version numbers
 */

const fs = require('fs');
const path = require('path');

// ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ
const BUILD_GRADLE_PATH = path.join(__dirname, '../android-app/android/app/build.gradle');
const VERSION_FILE_PATH = path.join(__dirname, '../version.json');

// ÈªòËÆ§ÁâàÊú¨‰ø°ÊÅØ
const DEFAULT_VERSION = {
    versionCode: 1,
    versionName: "1.0.0",
    buildNumber: 0,
    lastBuildDate: new Date().toISOString()
};

/**
 * ËØªÂèñÂΩìÂâçÁâàÊú¨‰ø°ÊÅØ
 */
function readCurrentVersion() {
    try {
        if (fs.existsSync(VERSION_FILE_PATH)) {
            const content = fs.readFileSync(VERSION_FILE_PATH, 'utf8');
            return JSON.parse(content);
        }
    } catch (error) {
        console.warn('ËØªÂèñÁâàÊú¨Êñá‰ª∂Â§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÁâàÊú¨:', error.message);
    }
    return { ...DEFAULT_VERSION };
}

/**
 * ‰øùÂ≠òÁâàÊú¨‰ø°ÊÅØ
 */
function saveVersion(versionInfo) {
    try {
        fs.writeFileSync(VERSION_FILE_PATH, JSON.stringify(versionInfo, null, 2));
        console.log('‚úÖ ÁâàÊú¨‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:', versionInfo);
    } catch (error) {
        console.error('‚ùå ‰øùÂ≠òÁâàÊú¨Êñá‰ª∂Â§±Ë¥•:', error.message);
        throw error;
    }
}

/**
 * ÈÄíÂ¢ûÁâàÊú¨Âè∑
 */
function incrementVersion(currentVersion, incrementType = 'patch') {
    const newVersion = { ...currentVersion };

    // ÈÄíÂ¢ûÊûÑÂª∫Âè∑
    newVersion.buildNumber = (currentVersion.buildNumber || 0) + 1;
    newVersion.versionCode = (currentVersion.versionCode || 1) + 1;
    newVersion.lastBuildDate = new Date().toISOString();

    // Ëß£ÊûêÁâàÊú¨ÂêçÁß∞ (ËØ≠‰πâÂåñÁâàÊú¨)
    const versionParts = (currentVersion.versionName || '1.0.0').split('.');
    let major = parseInt(versionParts[0]) || 1;
    let minor = parseInt(versionParts[1]) || 0;
    let patch = parseInt(versionParts[2]) || 0;

    switch (incrementType) {
        case 'major':
            major++;
            minor = 0;
            patch = 0;
            break;
        case 'minor':
            minor++;
            patch = 0;
            break;
        case 'patch':
        default:
            patch++;
            break;
    }

    newVersion.versionName = `${major}.${minor}.${patch}`;

    return newVersion;
}

/**
 * Êõ¥Êñ∞ build.gradle Êñá‰ª∂
 */
function updateBuildGradle(versionInfo) {
    try {
        if (!fs.existsSync(BUILD_GRADLE_PATH)) {
            throw new Error('build.gradle Êñá‰ª∂‰∏çÂ≠òÂú®: ' + BUILD_GRADLE_PATH);
        }

        let content = fs.readFileSync(BUILD_GRADLE_PATH, 'utf8');

        // Êõ¥Êñ∞ versionCode
        content = content.replace(
            /versionCode\s+\d+/,
            `versionCode ${versionInfo.versionCode}`
        );

        // Êõ¥Êñ∞ versionName
        content = content.replace(
            /versionName\s+"[^"]*"/,
            `versionName "${versionInfo.versionName}"`
        );

        fs.writeFileSync(BUILD_GRADLE_PATH, content);
        console.log('‚úÖ build.gradle Â∑≤Êõ¥Êñ∞');

    } catch (error) {
        console.error('‚ùå Êõ¥Êñ∞ build.gradle Â§±Ë¥•:', error.message);
        throw error;
    }
}

/**
 * ÁîüÊàêÊûÑÂª∫‰ø°ÊÅØ
 */
function generateBuildInfo(versionInfo) {
    const buildInfo = {
        version: versionInfo.versionName,
        versionCode: versionInfo.versionCode,
        buildNumber: versionInfo.buildNumber,
        buildDate: versionInfo.lastBuildDate,
        gitCommit: process.env.GITHUB_SHA || 'unknown',
        gitBranch: process.env.GITHUB_REF_NAME || 'unknown',
        buildId: process.env.GITHUB_RUN_ID || 'unknown'
    };

    const buildInfoPath = path.join(__dirname, '../android-app/web/build-info.json');

    try {
        fs.writeFileSync(buildInfoPath, JSON.stringify(buildInfo, null, 2));
        console.log('‚úÖ ÊûÑÂª∫‰ø°ÊÅØÂ∑≤ÁîüÊàê:', buildInfoPath);
    } catch (error) {
        console.warn('‚ö†Ô∏è  ÁîüÊàêÊûÑÂª∫‰ø°ÊÅØÂ§±Ë¥•:', error.message);
    }

    return buildInfo;
}

/**
 * ‰∏ªÂáΩÊï∞
 */
async function main() {
    console.log('üöÄ ÂºÄÂßãÁâàÊú¨ÁÆ°ÁêÜÊµÅÁ®ã...');

    try {
        // ËØªÂèñÂΩìÂâçÁâàÊú¨
        const currentVersion = readCurrentVersion();
        console.log('üìã ÂΩìÂâçÁâàÊú¨:', currentVersion);

        // Ëé∑ÂèñÈÄíÂ¢ûÁ±ªÂûãÔºà‰ªéÂëΩ‰ª§Ë°åÂèÇÊï∞Ôºâ
        const incrementType = process.argv[2] || 'patch';
        console.log('üìà ÈÄíÂ¢ûÁ±ªÂûã:', incrementType);

        // ÈÄíÂ¢ûÁâàÊú¨
        const newVersion = incrementVersion(currentVersion, incrementType);
        console.log('üÜï Êñ∞ÁâàÊú¨:', newVersion);

        // Êõ¥Êñ∞ build.gradle
        updateBuildGradle(newVersion);

        // ‰øùÂ≠òÁâàÊú¨‰ø°ÊÅØ
        saveVersion(newVersion);

        // ÁîüÊàêÊûÑÂª∫‰ø°ÊÅØ
        const buildInfo = generateBuildInfo(newVersion);

        console.log('\nüéâ ÁâàÊú¨ÁÆ°ÁêÜÂÆåÊàêÔºÅ');
        console.log('üì± APK ÁâàÊú¨‰ø°ÊÅØ:');
        console.log(`   ÁâàÊú¨Âè∑: ${newVersion.versionName}`);
        console.log(`   ÁâàÊú¨‰ª£Á†Å: ${newVersion.versionCode}`);
        console.log(`   ÊûÑÂª∫Âè∑: ${newVersion.buildNumber}`);
        console.log(`   ÊûÑÂª∫Êó∂Èó¥: ${new Date().toLocaleString()}`);

        // ËæìÂá∫‰æõ GitHub Actions ‰ΩøÁî®ÁöÑÂèòÈáè
        console.log(`\n::set-output name=version_name::${newVersion.versionName}`);
        console.log(`::set-output name=version_code::${newVersion.versionCode}`);
        console.log(`::set-output name=build_number::${newVersion.buildNumber}`);

    } catch (error) {
        console.error('\n‚ùå ÁâàÊú¨ÁÆ°ÁêÜÂ§±Ë¥•:', error.message);
        process.exit(1);
    }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
    main().catch(error => {
        console.error('Á®ãÂ∫èÂºÇÂ∏∏:', error);
        process.exit(1);
    });
}

module.exports = {
    readCurrentVersion,
    incrementVersion,
    updateBuildGradle,
    generateBuildInfo
};